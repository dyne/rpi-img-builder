#!/bin/bash

RED="\e[0;31m"
GRN="\e[0;32m"
PNK="\e[0;35m"
BLU="\e[0;36m"
WHT="\033[0m"
FIN="\e[0m"

### Functions
echo_nok(){
echo -en "${PNK}[${FIN}${GRN}ok${FIN}${PNK}]${FIN}"
}

echo_done(){
echo -en "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
}

echo_focal(){
echo -en "${PNK}[${FIN}${GRN}Ubuntu Focal${FIN}${PNK}]${FIN}"
}

echo_jammy(){
echo -en "${PNK}[${FIN}${GRN}Ubuntu Jammy Jellyfish${FIN}${PNK}]${FIN}"
}

echo_bullseye(){
echo -en "${PNK}[${FIN}${GRN}Debian Bullseye${FIN}${PNK}]${FIN}"
}

echo_chimaera(){
echo -en "${PNK}[${FIN}${GRN}Devuan Chimaera${FIN}${PNK}]${FIN}"
}

echo_fail(){
echo -en "${PNK}[${FIN}${RED}failed${FIN}${PNK}]${FIN}"
}

ierror(){
echo ""
echo -e "${WHT}Please check your internet connection and try again${FIN}."
}

derror(){
echo ""
echo -e "${WHT}The OS you are running is not supported${FIN}."
}

confirm(){
echo -e "${BLU}If you don't know what this command does, say no.${FIN}"
echo -e ""
read -p "Continue (y/n)?" choice
case "$choice" in
	y|Y ) echo && echo -e "${WHT}Confirmed${FIN}!";;
	n|N ) echo && echo -e "${WHT}You have chosen${FIN}... ${BLU}wisely${FIN}." && exit 0;;
	* ) echo && echo -e "${WHT}Invalid choice${FIN}." && exit 0;;
esac
}

internet_check(){
echo -en "${WHT}Checking Internet Connection:${FIN} "
if [[ `wget -S --spider https://github.com 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo_nok
	echo "";
else
	echo_fail
	echo ""
	ierror
	exit 1 > /dev/null 2>&1;
fi
}

distro_check(){
echo -en "${WHT}Checking Host Machine:${FIN} "
sleep 1s
if [[ `grep -w "jammy" "/etc/os-release"` ]]; then
	echo_jammy
	echo "";
else
	if [[ `grep -w "bullseye" "/etc/os-release"` ]]; then
		echo_bullseye
		echo "";
	else
		if [[ `grep -w "chimaera" "/etc/os-release"` ]]; then
			echo_chimaera
			echo "";
		else
			echo_fail
			echo ""
			derror
			exit > /dev/null 2>&1;
		fi
	fi
fi
}

userdata(){
tee userdata.txt <<EOF
### LINUX KERNEL
NAME=""
VERSION="$branch.y"
BUILD_VERSION="$build"
menuconfig=0
crosscompile=1
### COMPILER
GCC_VERSION="$version"
gcc=1
ccache=0
clang=0
### DISTRIBUTION
DISTRO="debian"
DISTRO_VERSION="bullseye"
### FILESYSTEM
ext4=1
btrfs=0
xfs=0
### CUSTOM
custom_defconfig=0
MYCONFIG="_defconfig"
verbose=0
userscripts=0
useracct=0
### CLANG/LLVM
CLANG_LLVM="LLVM=1 LLVM_IAS=1"
lto_clang_thin=0
### COMPILER TUNING
CORES=\`nproc\`
CFLAGS=""
### WHOAMI AND HOST
KBUSER="marvin"
KBHOST="martian"
### EXTRA WIRELESS
rtl8812au=0
rtl88x2bu=0
rtl8811cu=0
### DO NOT EDIT BELOW THIS LINE
builder=4.11
EOF
}

### Run
if [[ `uname -m | grep -w x86_64` ]]; then
	echo ""
	confirm
	echo ""
	internet_check
	distro_check
else
	if [[ `uname -m | grep -w aarch64` ]]; then
		echo ""
		confirm
		echo ""
		internet_check
		distro_check
	else
		echo -e "${RED}This command is for administrative purposes only${FIN}."
		exit 1 > /dev/null 2>&1;
	fi
fi
echo -en "${WHT}Preparing build area${FIN}: "
rm -f {userdata.txt,log.txt}
make cleanup > /dev/null 2>&1
make purge-all > /dev/null 2>&1
echo_done
echo ""
echo -en "${WHT}Linux branch: ${FIN}"
read branch
echo -en "${WHT}Build number: ${FIN}"
read build
echo -en "${WHT}GCC Version: ${FIN}"
read version

userdata > /dev/null 2>&1
sleep 1s
if [[ `uname -m | grep -w aarch64` ]]; then
	sed -i 's/crosscompile=1/crosscompile=0/g' userdata.txt;
fi
sleep 1s
echo `date` > log.txt
echo "" >> log.txt
echo "Linux branch: $branch" >> log.txt
echo "Build number: $build" >> log.txt
echo "GCC Version:  $version" >> log.txt
echo "" >> log.txt
echo "Results:" >> log.txt
make kernel board=bcm2711
if [[ `ls output/bcm2711/*.deb` ]] > /dev/null 2>&1; then
	echo "bcm2711" >> log.txt;
	ls output/bcm2711/*.deb >> log.txt;
	echo "" >> log.txt;
else
	echo -e "Build 2711 failed!";
	exit > /dev/null 2>&1;
fi
make kernel board=bcm2710
if [[ `ls output/bcm2710/*.deb` ]] > /dev/null 2>&1; then
	echo "bcm2710" >> log.txt;
	ls output/bcm2710/*.deb >> log.txt;
	echo "" >> log.txt;
else
	echo -e "Build 2710 failed!";
	exit > /dev/null 2>&1;
fi
sleep 1s
if [[ `grep -w "crosscompile=0" "userdata.txt"` ]]; then
	sed -i 's/crosscompile=0/crosscompile=1/g' userdata.txt;
fi
sleep 1s
make kernel board=bcm2711v7
if [[ `ls output/bcm2711v7/*.deb` ]] > /dev/null 2>&1; then
	echo "bcm2711 v7" >> log.txt;
	ls output/bcm2711v7/*.deb >> log.txt;
	echo "" >> log.txt;
else
	echo -e "Build 2711v7 failed!";
	exit > /dev/null 2>&1;
fi
make kernel board=bcm2709
if [[ `ls output/bcm2709/*.deb` ]] > /dev/null 2>&1; then
	echo "bcm2709" >> log.txt;
	ls output/bcm2709/*.deb >> log.txt;
	echo "" >> log.txt;
else
	echo -e "Build 2709 failed!";
	exit > /dev/null 2>&1;
fi
make kernel board=bcm2708
if [[ `ls output/bcm2708/*.deb` ]] > /dev/null 2>&1; then
	echo "bcm2708" >> log.txt;
	ls output/bcm2708/*.deb >> log.txt;
	echo "" >> log.txt;
else
	echo -e "Build 2708 failed!";
	exit > /dev/null 2>&1;
fi
echo `date` >> log.txt
echo -e "${WHT}"
cat log.txt
echo -e "${FIN}"
rm -f {userdata.txt,log.txt}
make cleanup > /dev/null 2>&1
make compress
exit 0
