partition(){
truncate -s 1100MB "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
a
t
b
2148436

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p1"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p1
sync
umount p1
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p1
}

partitions(){
fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" <<EOF
o
n
p
1
2048
524287
a
c
t
b
n
p
2
524288

p
w

EOF
IMAGE_LOOP_DEV="$(losetup --show -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_BOOT="${IMAGE_LOOP_DEV}p1"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}p2"
partprobe "${IMAGE_LOOP_DEV}"
mkfs.vfat -n BOOT "${IMAGE_LOOP_DEV_BOOT}"
mkfs.ext4 -L ROOTFS "${IMAGE_LOOP_DEV_ROOTFS}"
mkdir -p p1 p2
mount "${IMAGE_LOOP_DEV_BOOT}" p1
mount "${IMAGE_LOOP_DEV_ROOTFS}" p2
sync
umount p2
mount -o defaults,noatime "${IMAGE_LOOP_DEV_ROOTFS}" p2
}

create_fstab(){
tee p2/etc/fstab <<EOF
UUID=${BOOT_UUID}	/boot		vfat    defaults 0 2
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

partition_uuid(){
BOOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_BOOT}" | sed -ne 's/^UUID=//p')
ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')

echo BOOT_UUID='"'$BOOT_UUID'"' > part-uuid.txt
echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt

source part-uuid.txt
}

cmdline(){
tee p1/cmdline.txt <<EOF
console=serial0,115200 console=tty1 root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 elevator=deadline fsck.repair=yes logo.nologo net.ifnames=0 rootwait
EOF
}

bcm2711_config(){
tee p1/config.txt <<EOF
# For more options and information see
# http://rpf.io/configtxt
# Some settings may impact device functionality. See link above for details

# uncomment if you get no picture on HDMI for a default "safe" mode
#hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
#framebuffer_width=1280
#framebuffer_height=720

### uncomment to set display to 1024x768
#overscan_left=0
#overscan_right=0
#overscan_top=0
#overscan_bottom=0

#framebuffer_width=1024
#framebuffer_height=768
#framebuffer_depth=16

#hdmi_group=2
#hdmi_mode=16

# uncomment if hdmi display is not detected and composite is being output
#hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
#hdmi_group=1
#hdmi_mode=1

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
#hdmi_drive=2

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

# camera
#start_x=1
gpu_mem=128

# uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800

# uncomment some or all of these to enable the optional hardware interfaces
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on

# uncomment this to enable infrared communication.
#dtoverlay=gpio-ir,gpio_pin=17
#dtoverlay=gpio-ir-tx,gpio_pin=18

# additional overlays and parameters are documented /boot/overlays/README

# enable audio (loads snd_bcm2835)
dtparam=audio=on

# enable uart
enable_uart=0

# Disable wifi and bluetooth
#dtoverlay=disable-wifi
#dtoverlay=disable-bt

# Remove test rainbow
disable_splash=1

[pi4]
# enable DRM VC4 V3D driver on top of the dispmanx display stack
dtoverlay=vc4-fkms-v3d
max_framebuffers=2
EOF
}

bcm2710_config(){
tee p1/config.txt <<EOF
# For more options and information see
# http://rpf.io/configtxt
# Some settings may impact device functionality. See link above for details

# uncomment if you get no picture on HDMI for a default "safe" mode
#hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
#framebuffer_width=1280
#framebuffer_height=720

### uncomment to set display to 1024x768
#overscan_left=0
#overscan_right=0
#overscan_top=0
#overscan_bottom=0

#framebuffer_width=1024
#framebuffer_height=768
#framebuffer_depth=16

#hdmi_group=2
#hdmi_mode=16

# uncomment if hdmi display is not detected and composite is being output
#hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
#hdmi_group=1
#hdmi_mode=1

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
#hdmi_drive=2

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

# camera
#start_x=1
gpu_mem=128

# uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800

# uncomment some or all of these to enable the optional hardware interfaces
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on

# uncomment this to enable infrared communication.
#dtoverlay=gpio-ir,gpio_pin=17
#dtoverlay=gpio-ir-tx,gpio_pin=18

# additional overlays and parameters are documented /boot/overlays/README

# enable audio (loads snd_bcm2835)
dtparam=audio=on

# enable uart
enable_uart=0

# Disable wifi and bluetooth
#dtoverlay=pi3-disable-wifi
#dtoverlay=pi3-disable-bt

# Remove test rainbow
disable_splash=1
EOF
}

bcm2708_config(){
tee p1/config.txt <<EOF
# For more options and information see
# http://rpf.io/configtxt
# Some settings may impact device functionality. See link above for details

# uncomment if you get no picture on HDMI for a default "safe" mode
#hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
#framebuffer_width=1280
#framebuffer_height=720

### uncomment to set display to 1024x768
#overscan_left=0
#overscan_right=0
#overscan_top=0
#overscan_bottom=0

#framebuffer_width=1024
#framebuffer_height=768
#framebuffer_depth=16

#hdmi_group=2
#hdmi_mode=16

# uncomment if hdmi display is not detected and composite is being output
#hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
#hdmi_group=1
#hdmi_mode=1

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
#hdmi_drive=2

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

# camera
#start_x=1
gpu_mem=128

# uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800

# uncomment some or all of these to enable the optional hardware interfaces
#dtparam=i2c_arm=on
#dtparam=i2s=on
#dtparam=spi=on

# uncomment this to enable infrared communication.
#dtoverlay=gpio-ir,gpio_pin=17
#dtoverlay=gpio-ir-tx,gpio_pin=18

# additional overlays and parameters are documented /boot/overlays/README

# enable audio (loads snd_bcm2835)
dtparam=audio=on

# enable uart
enable_uart=0

# Disable wifi and bluetooth
#dtoverlay=disable-wifi
#dtoverlay=disable-bt

# Remove test rainbow
disable_splash=1
EOF
}

rpi4_bootbins(){
mkdir -p firmware/boot
rm -f firmware/boot/*
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4.dat
if ls firmware/boot/fixup4.dat > /dev/null 2>&1
	then echo -n "fixup4.dat " && echo_nok;
	else echo -n "fixup4.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4cd.dat
if ls firmware/boot/fixup4cd.dat > /dev/null 2>&1
	then echo -n "fixup4cd.dat " && echo_nok;
	else echo -n "fixup4cd.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4db.dat
if ls firmware/boot/fixup4db.dat > /dev/null 2>&1
	then echo -n "fixup4db.dat " && echo_nok;
	else echo -n "fixup4db.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup4x.dat
if ls firmware/boot/fixup4x.dat > /dev/null 2>&1
	then echo -n "fixup4x.dat " && echo_nok;
	else echo -n "fixup4x.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4.elf
if ls firmware/boot/start4.elf > /dev/null 2>&1
	then echo -n "start4.elf " && echo_nok;
	else echo -n "start4.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4cd.elf
if ls firmware/boot/start4cd.elf > /dev/null 2>&1
	then echo -n "start4cd.elf " && echo_nok;
	else echo -n "start4cd.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4db.elf
if ls firmware/boot/start4db.elf > /dev/null 2>&1
	then echo -n "start4db.elf " && echo_nok;
	else echo -n "start4db.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start4x.elf
if ls firmware/boot/start4x.elf > /dev/null 2>&1
	then echo -n "start4x.elf " && echo_nok;
	else echo -n "start4x.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/LICENCE.broadcom
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/COPYING.linux

install -v -m 0644 firmware/boot/fixup4*.dat p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/start4*.elf p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/LICENCE.broadcom p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/COPYING.linux p1/ > /dev/null 2>&1
if ls p1/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1
	then echo -n "install " && echo_bdone;
	else echo -n "install " && echo_fail && exit;
fi
}

rpi_bootbins(){
mkdir -p firmware/boot
rm -f firmware/boot/*
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/bootcode.bin
if ls firmware/boot/bootcode.bin > /dev/null 2>&1
	then echo -n "bootcode.bin " && echo_nok;
	else echo -n "bootcode.bin " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat
if ls firmware/boot/fixup.dat > /dev/null 2>&1
	then echo -n "fixup.dat " && echo_nok;
	else echo -n "fixup.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup_cd.dat
if ls firmware/boot/fixup_cd.dat > /dev/null 2>&1
	then echo -n "fixup_cd.dat " && echo_nok;
	else echo -n "fixup_cd.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup_db.dat
if ls firmware/boot/fixup_db.dat > /dev/null 2>&1
	then echo -n "fixup_db.dat " && echo_nok;
	else echo -n "fixup_db.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/fixup_x.dat
if ls firmware/boot/fixup_x.dat > /dev/null 2>&1
	then echo -n "fixup_x.dat " && echo_nok;
	else echo -n "fixup_x.dat " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start.elf
if ls firmware/boot/start.elf > /dev/null 2>&1
	then echo -n "start.elf " && echo_nok;
	else echo -n "start.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start_cd.elf
if ls firmware/boot/start_cd.elf > /dev/null 2>&1
	then echo -n "start_cd.elf " && echo_nok;
	else echo -n "start_cd.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start_db.elf
if ls firmware/boot/start_db.elf > /dev/null 2>&1
	then echo -n "start_db.elf " && echo_nok;
	else echo -n "start_db.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/start_x.elf
if ls firmware/boot/start_x.elf > /dev/null 2>&1
	then echo -n "start_x.elf " && echo_nok;
	else echo -n "start_x.elf " && echo_fail;
fi
echo
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/LICENCE.broadcom
wget -cq -P firmware/boot https://github.com/raspberrypi/firmware/raw/master/boot/COPYING.linux

install -v -m 0644 firmware/boot/bootcode.bin p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/fixup*.dat p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/start*.elf p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/LICENCE.broadcom p1/ > /dev/null 2>&1
install -v -m 0644 firmware/boot/COPYING.linux p1/ > /dev/null 2>&1
if ls p1/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf} > /dev/null 2>&1
	then echo -n "install " && echo_bdone;
	else echo -n "install " && echo_fail && exit;
fi
}
