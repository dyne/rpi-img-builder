#!/bin/bash

RED="\e[0;31m"
GRN="\e[0;32m"
PNK="\e[0;35m"
TXT="\033[0m"
YLW="\e[0;33m"
FIN="\e[0m"

echo_nok(){
echo -e -n "${PNK}[${FIN}${GRN}OK${FIN}${PNK}]${FIN}"
}

echo_jammy(){
echo -e -n "${PNK}[${FIN}${GRN}Ubuntu Jammy Jellyfish${FIN}${PNK}]${FIN}"
}

echo_bullseye(){
echo -e -n "${PNK}[${FIN}${GRN}Debian Bullseye${FIN}${PNK}]${FIN}"
}

echo_fail(){
echo -n -e "${PNK}[${FIN}${RED}failed${FIN}${PNK}]${FIN}"
}

ierror(){
echo ""
echo -e "${TXT}Please check your internet connection and try again${FIN}."
}

derror(){
echo ""
echo -e "${TXT}The OS you are running is not supported${FIN}."
}

depends_check(){
if [[ `command -v wget` ]]; then
	:;
else
	if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
		echo -e "${TXT}Installing missing depends${FIN}."
		sudo apt update
		sudo apt upgrade -y
		sudo apt install -y wget;
	else
		echo_fail
		echo ""
		ierror
		exit 0;
	fi
fi
}

internet_check(){
echo -e -n "${TXT}Checking Internet Connection:${FIN} "
if [[ `wget -S --spider https://github.com 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo_nok
	echo "";
else
	echo_fail
	echo ""
	ierror
	exit 0;
fi
}

distro_check(){
echo -e -n "${TXT}Checking Host Machine:${FIN} "
sleep 1s
if [[ `grep -w "jammy" "/etc/os-release"` ]]; then
	echo_jammy
	echo "";
else
	if [[ `grep -w "bullseye" "/etc/os-release"` ]]; then
		echo_bullseye
		echo "";
	else
		echo_fail
		echo ""
		derror
		exit 0;
	fi
fi
}

echo ""
depends_check
internet_check
distro_check
echo ""

if [[ `uname -m | grep -w x86_64` ]]; then
	echo -e "${TXT}Starting install ...${FIN}"
	sleep 1s
	if [[ `command -v make` ]]; then
		sudo apt update
		sudo apt upgrade -y
		make ccompile;
	else
		sleep 1s
		sudo apt update
		sudo apt upgrade -y
		sudo apt install -y make
		make ccompile;
	fi
fi

if [[ `uname -m | grep -w aarch64` ]]; then
echo -e -n "${TXT}"
echo -e "Arm64 detected. Select the dependencies you would like installed."
options=("Cross Compiling" "Native Compiling" "Quit")
select opt in "${options[@]}"
do
	case $opt in
		"Cross Compiling")
		if [[ `command -v make` ]]; then
			echo ""
			echo -e "${TXT}Starting install ...${FIN}"
			sleep 1s
			sudo apt update
			sudo apt upgrade -y
			make ccompile64;
		else
			echo ""
			echo -e "${TXT}Starting install ...${FIN}"
			sleep 1s
			sudo apt update
			sudo apt upgrade -y
			sudo apt install -y make
			make ccompile64;
		fi
			break
			;;
		"Native Compiling")
		if [[ `command -v make` ]]; then
			echo ""
			echo -e "${TXT}Starting install ...${FIN}"
			sleep 1s
			sudo apt update
			sudo apt upgrade -y
			make ncompile;
		else
			echo ""
			echo -e "${TXT}Starting install ...${FIN}"
			sleep 1s
			sudo apt update
			sudo apt upgrade -y
			sudo apt install -y make
			make ncompile;
		fi
			break
			;;
		"Quit")
			break
			;;
		*) echo "invalid option $REPLY";;
	esac
done
echo -e -n "${FIN}"
fi

make dialogrc > /dev/null 2>&1
echo ""
clear -x
make help

exit 0
